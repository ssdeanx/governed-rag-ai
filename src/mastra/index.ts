import { Mastra } from "@mastra/core";
import { answererAgent } from "./agents/answerer.agent";
import { rerankAgent } from "./agents/rerank.agent";
import { retrieveAgent } from "./agents/retrieve.agent";
import { verifierAgent } from "./agents/verifier.agent";
import { log } from "./config/logger";
import { governedRagAnswer } from "./workflows/governed-rag-answer.workflow";
import { governedRagIndex } from "./workflows/governed-rag-index.workflow";
import { MastraJwtAuth } from '@mastra/auth';
import { LangfuseExporter } from "./ai-tracing";
import { SamplingStrategyType } from "@mastra/core/ai-tracing";
import { store } from './config/pg-storage'
import { sqlstore } from "./config/libsql-storage";
import { researchAgent } from "./agents/researchAgent";
import { starterAgent } from "./agents/starterAgent";
import { assistantAgent } from "./agents/assistant";
import { researchWorkflow } from "./workflows/researchWorkflow";
import { reportAgent } from "./agents/reportAgent";
import { copywriterAgent } from "./agents/copywriterAgent";
import { evaluationAgent } from "./agents/evaluationAgent";
import { learningExtractionAgent } from "./agents/learningExtractionAgent";
import { productRoadmapAgent } from "./agents/productRoadmapAgent";
import { editorAgent } from "./agents/editorAgent";
import { generateReportWorkflow } from "./workflows/generateReportWorkflow";
import { chatWorkflow } from "./workflows/chatWorkflow1";
import { contentGenerationWorkflow } from "./workflows/contentGenerationWorkflow";
import { randomUUID } from "crypto";
import { qdrantVector } from "./config/vector-store";
import { SensitiveDataFilter } from '@mastra/core/ai-tracing';


log.info("Mastra instance created");
export const mastra = new Mastra({
  storage: sqlstore,
  logger: log,
  agents: {
    retrieve: retrieveAgent,
    rerank: rerankAgent,
    answerer: answererAgent,
    verifier: verifierAgent,
    starter: starterAgent,
    research: researchAgent,
    researcher: researchAgent,
    assist: assistantAgent,
    assistant: assistantAgent, // backward-compatible alias
    report: reportAgent,
    copywriter: copywriterAgent,
    evaluation: evaluationAgent,
    learning: learningExtractionAgent,
    productRoadmap: productRoadmapAgent,
    editor: editorAgent,
    // Add more agents here
  },
  workflows: {
    'governed-rag-index': governedRagIndex,
    'governed-rag-answer': governedRagAnswer,
    'research-workflow': researchWorkflow,
    'generate-report-workflow': generateReportWorkflow,
    'chat-workflow': chatWorkflow,
    'chat-workflow-1': chatWorkflow, // backward-compatible alias
    'content-generation': contentGenerationWorkflow,
  },
  vectors: {
    qdrant: qdrantVector,
  },
  server: {
    experimental_auth: new MastraJwtAuth({
        secret: process.env.JWT_TOKEN!
    }),
  },
  observability: {
      configs: {
        langfuse: {
          serviceName: process.env.SERVICE_NAME ?? 'mastra',
          sampling: { type: SamplingStrategyType.ALWAYS },
          exporters: [
            new LangfuseExporter({
              publicKey: process.env.LANGFUSE_PUBLIC_KEY,
              secretKey: process.env.LANGFUSE_SECRET_KEY,
              baseUrl: process.env.LANGFUSE_BASE_URL, // Optional
              realtime: process.env.NODE_ENV === 'development',
              logLevel: 'info',
              options: {
                batchSize: 200,
                flushInterval: 5000,
              }
            }),
          ],
        },
      },
  },
  idGenerator: (() => `${randomUUID()}`), // Prefix for all IDs generated by Mastra
});


